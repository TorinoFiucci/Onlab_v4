@* Onlab_v4.Client/Components/Tasks/AddTaskDialog.razor *@
@using Onlab.Transfer
@using MudBlazor
@using Onlab_v4.Client.Pages

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add New Task</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" Model="newTask">
            <MudTextField @bind-Value="newTask.Title"
                          For="@(() => newTask.Title)"
                          Label="Title"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="Title is required!"
                          Class="mb-3" />

            <MudTextField @bind-Value="newTask.Description"
                          For="@(() => newTask.Description)"
                          Label="Description"
                          Variant="Variant.Outlined"
                          Lines="3"
                          Class="mb-3" />

            <MudDatePicker @bind-Date="newTask.DueDate"
                           Label="Due Date"
                           Variant="Variant.Outlined"
                           Class="mb-3" />

            @* You can add a multi-select for AssignedTo here later *@
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!success)">Create Task</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    private TaskItemModel newTask = new TaskItemModel();
    private MudForm form = default!;
    private bool success; // Bound to MudForm's IsValid

    private void Submit()
    {
        form.Validate(); // Ensure validation is triggered
        if (success)
        {
            MudDialog.Close(DialogResult.Ok(newTask));
        }
    }

    void Cancel() => MudDialog.Cancel();
}
